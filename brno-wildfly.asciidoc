Wildfly Graceful Shutdown
=========================
:author: Stuart Douglas
:email: <stuart.w.douglas@gmail.com>
///////////////////////
	Themes that you can choose includes:
	web-2.0, swiss, neon beamer
///////////////////////
:deckjs_theme: swiss2
///////////////////////
	Transitions that you can choose includes:
	fade, horizontal-slide, vertical-slide
///////////////////////
:deckjs_transition: horizontal-slide
///////////////////////
	AsciiDoc use `source-highlight` as default highlighter.

	Styles available for pygment highlighter:
	monokai, manni, perldoc, borland, colorful, default, murphy, vs, trac,
	tango, fruity, autumn, bw, emacs, vim, pastie, friendly, native,

	Uncomment following two lines if you want to highlight your code
	with `Pygments`.
///////////////////////
:pygments:
:pygments_style: default
///////////////////////
	Uncomment following line if you want to scroll inside slides
	with {down,up} arrow keys.
///////////////////////
//:scrollable:
///////////////////////
	Uncomment following line if you want to link css and js file
	from outside instead of embedding them into the output file.
///////////////////////
//:linkcss:
///////////////////////
	Uncomment following line if you want to count each incremental
	bullet as a new slide
///////////////////////
//:count_nested:
:customcss: slides.css

== Wildfly 9
 * Graceful shutdown
 * Build Split and Provisioning
 * HTTP2, SPDY
 * mod_cluster

== Graceful Shutdown
 * AKA suspend/resume
 * Graceful shutdown allows a server to suspend in a graceful manner, rejecting new requests and allowing existing requests to finish
 * Server can be shut down once request is finished

== Graceful shutdown management operations
 * +:suspend(timeout=x)+ <=will block until timeout is hit or server suspends
 * +:resume+
 * +:shutdown(timeout=x)+  <= will suspend, and once server is suspended or timeout is hit will shut down
 * +:read-attribute(name=suspend-state)+

== Suspend States

RUNNING:: The server is running as normal
PRE_SUSPEND:: The server is about to start suspending
SUSPENDING:: The server is suspending, and will not accept any new requests
SUSPENDED:: All existing requests have completed, and the server has suspended

== PRE_SUSPEND
 * When a graceful shutdown command is issued the container first goes into PRE_SUSPEND
 * In this phase the server will notify external parties that it is about to go away
 * For example if mod_cluster is in use it will tell the load balancer to stop sending requests
 * MDB container will stop accepting new messages

== SUSPENDING
 * At this point all new requests are rejected
 * Existing requests will run as normal
 * New requests are requests that come from outside the server (e.g. web requests, remote EJB etc)

== SUSPENDED
 * All requests have completed
 * You can now shut down or make configuration changes
 * If you call +resume+ the server should be able to accept new requests immediately (there is no redeploy or startup cost)

== Code base split
 * Wildfly has been split up into two separate repositories, core and full
 * Wildfly Core contains the base server and all management capabilities
 * Wildfly Full contains all EE and deployment related functionality
 * We now provide tooling to facilitate building Wildfly extensions and add ons

== Feature Packs
 * In oder to facilitate the code base split Wildfly 9 introduces the idea of Feature Packs
 * Feature packs are basically a set of instructions for building a Wildfly instance
 * Feature packs are very lightweight, as they do not contain the actual jars, just maven coordinates

== Server Provisioning
 * Feature packs are used to 'provision' a server, which takes all the required feature packs and creates a usable server
 * Can provision a 'thick' or 'thin' server
 * A thick server is a traditional Wildfly server, with all jar files needed located under the modules directory
 * A thin server references a maven artifact in the module descriptors, and runs using jar's located in the maven repository
 * A thin server is much smaller (around 17mb, less if we don't include schema files), although they still need the jars to be in the maven repo these can be shared between instances

== Server provisioning
 * Provisioning is done by a provisioning library
 * At the moment we have two front ends, a maven plugin and a standalone jar that can be run from the command line
 * Maven plugin allows for easy testing, as the server can be provisioned as part of the build

== server-provisioning.xml
 


== Reverse proxy support
 * Wildfly 9 uses Undertow's reverse proxy capability to allow it to act as a load balancer
 * Can be used as a static load balancer, or use mod_proxy to allow for dynamic discovery
 * No need for apache in the front end any more
 * Can use modern protocols such as SPDY and HTTP2 to connect to the back end nodes, which is more efficient that HTTP or AJP

== mod_cluster front end support
 * Reverse proxy supports mod_cluster functionality, allowing for dynamic backend discovery
 * Load balancer advertises itself using multicast
 * Backend servers then connect to load balancer, and let it know their IP address and what deployments are available
 * They also send load information, which the proxy uses when deciding which backend to send the request to

== mod_cluster demo
 * Demo uses domain mode to create two server groups, representing the load balancer and the backend
 * Backend nodes have system properties set to allow you to tell which node handed the request
 * The whole setup is controlled through the domain controller
 * Easiest way to get started with clustering, no native code required


== mod_cluster demo topology
Topology;;
 image:DemoTopology.001.jpg[height=500]
