Wildfly and the Security Manager
================================
:author: Stuart Douglas
:email: <stuart.w.douglas@gmail.com>
///////////////////////
	Themes that you can choose includes:
	web-2.0, swiss, neon beamer
///////////////////////
:deckjs_theme: swiss2
///////////////////////
	Transitions that you can choose includes:
	fade, horizontal-slide, vertical-slide
///////////////////////
:deckjs_transition: horizontal-slide
///////////////////////
	AsciiDoc use `source-highlight` as default highlighter.

	Styles available for pygment highlighter:
	monokai, manni, perldoc, borland, colorful, default, murphy, vs, trac,
	tango, fruity, autumn, bw, emacs, vim, pastie, friendly, native,

	Uncomment following two lines if you want to highlight your code
	with `Pygments`.
///////////////////////
:pygments:
:pygments_style: default
///////////////////////
	Uncomment following line if you want to scroll inside slides
	with {down,up} arrow keys.
///////////////////////
//:scrollable:
///////////////////////
	Uncomment following line if you want to link css and js file
	from outside instead of embedding them into the output file.
///////////////////////
//:linkcss:
///////////////////////
	Uncomment following line if you want to count each incremental
	bullet as a new slide
///////////////////////
//:count_nested:
:customcss: slides.css

== Wildfly and the Security Manager
 * This quick talk explains what you need to know about the security manager when working on the Wildfly code base
 * It is not a general introduction to the security manager

== Basic Concepts
 * The Java Security manager allows you to check if certain code has permission to execute a certain action
 * In Wildfly permissions depend on the module the code is defined in
 * By default all code in the `modules` directory has all permissions and can do anything
 * User deployments have a very limited initial set of permissions
 * If user code calls into application server code that tries to perform a permission check we can run into problems

== Permission Checks
 * When performing a permission check the security manager considers the permission of all code on the call stack up to the last `AccessController.doPrivileged` invocation
 * In general this means that if there is user code in the call stack then a permission check will likely fail unless the deployment has been explicitly granted the relevant permission
 * This means that deployment code does not usually need to worry about permissions (as it runs in application server code, that has all permissions)

== WildflySecurityManager.doUnchecked
 * This performs a similar role to `AccessController.doPrivileged`, but actually turns off the security manager for the current thread while running the task
 * This *must not* be used if if it possible control could return to application code, as then this code can perform any actions
 * It is faster than `AccessController.doPrivileged`, however can only be used when the scope of the `PrivilegedAction` is known

