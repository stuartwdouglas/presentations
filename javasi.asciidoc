Undertow
========
:author: Stuart Douglas
:email: <stuart.w.douglas@gmail.com>
///////////////////////
	Themes that you can choose includes:
	web-2.0, swiss, neon beamer
///////////////////////
:deckjs_theme: swiss
///////////////////////
	Transitions that you can choose includes:
	fade, horizontal-slide, vertical-slide
///////////////////////
:deckjs_transition: horizontal-slide
///////////////////////
	AsciiDoc use `source-highlight` as default highlighter.

	Styles available for pygment highlighter:
	monokai, manni, perldoc, borland, colorful, default, murphy, vs, trac,
	tango, fruity, autumn, bw, emacs, vim, pastie, friendly, native,

	Uncomment following two lines if you want to highlight your code
	with `Pygments`.
///////////////////////
:pygments:
:pygments_style: default
///////////////////////
	Uncomment following line if you want to scroll inside slides
	with {down,up} arrow keys.
///////////////////////
//:scrollable:
///////////////////////
	Uncomment following line if you want to link css and js file
	from outside instead of embedding them into the output file.
///////////////////////
//:linkcss:
///////////////////////
	Uncomment following line if you want to count each incremental
	bullet as a new slide
///////////////////////
//:count_nested:

== Undertow Presentation Outline
 * Undertow Overview
 * Undertow Architecture
 * HTTP Upgrade
 * Websockets
 * Servlet 3.1
 * Reverse Proxy
 * Embedded Undertow
 * Undertow Extensions

== Undertow

 * New webserver project integrated in WildFly 8 (The server formerly known as JBoss Application Server)
 * Servlet 3.1 container
 * Websocket implementation
 * Supports HTTP Upgrade
 * Supports the use of high performance non-blocking handlers in servlet deployments

== Why Another Webserver?
 * A true non-blocking API (servlet is by itself insufficient)
 * Improved support for modern security standards
 * Upgrade from HTTP to our native protocols
 * Will allow wildfly to run in single port mode
 * Support the latest network protocols naturally and with minimal overhead
 * Best possible performance and memory efficiency
 * Handle complex routing use cases a la mod_rewrite
 * Embeddable in standalone process / test environment

== Undertow Architecture

 * An Undertow server instance is composed of one or more connectors, and a handler chain
 * The connectors handle incoming requests using async IO
 * Once a request is fully parsed it is passed off to the handler chain
 * All functionality is implemented by chaining handlers together
 * Undertow is based on XNIO, which is a thin layer over Java NIO

== Undertow Architecture Diagram

 TODO: insert diagram

== The HttpHandler interface

[source,java]
----
public interface HttpHandler {
    void handleRequest(HttpServerExchange exchange) throws Exception;
}
----

== The Server

=== HTTP Handlers
 * Handlers perform actions on the exchange, e.g. setting headers, writing a response etc
 * The Undertow Servlet implementation is implemented as a series of handlers
 * The security implementation is also a series of handlers, most of which is usable outside of Servlet

=== The HttpServerExchange
 * Represents both the request and the response
 * Lets you get/set headers, write response etc
 * Can have arbitrary data attached to it via the use of attachments
 * Can read/write request/response via blocking or non-blocking IO

== Blocking and Non Blocking IO
 * Initially handlers are run in an IO thread, they cannot perform blocking actions
 * An exchange can be dispatched to an executor in order to allow it to perform blocking tasks
 * By default an exchange will use non-blocking IO, unless the `startBlocking()` method has been called

== Non Blocking Hello World Example

[source,java]
----
Undertow server = Undertow.builder()
        .addListener(8080, "localhost")
        .setHandler(new HttpHandler() {
            @Override
            public void handleRequest(final HttpServerExchange exchange) throws Exception {
                exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");
                exchange.getResponseSender().send("Hello World");
            }
        }).build();
server.start();
----

== Blocking Hello World Example

[source,java]
----
class BlockingHelloWorld implements HttpHandler {
        @Override
        public void handleRequest(final HttpServerExchange exchange) throws Exception {
            if(exchange.isInIoThread()) { //check if we are in the IO thread
                exchange.dispatch(this); //execute this handler using the default worker executor
                return;
            }
            exchange.startBlocking(); //switch to blocking IO
            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "text/plain");
            exchange.getOutputStream().write("Hello World".getBytes());
        }
}
----


== HTTP Upgrade

=== What is it

 * HTTP Upgrade allows for a HTTP connection to be upgraded to another protocol.
 * Standard mechanism defined in the HTTP/1.1 RFC, most common use is to initiate a websocket connection
 * A HTTP client sends a request with the `Upgrade:` header to initiate the connection.
 * If the server accepts the upgrade it sends back a HTTP 101 response and hands off the socket to
whatever handles the upgraded protocol

=== Why use it?

 * It allows you to multiplex multiple protocols over the HTTP port
 * Makes firewall configuration simpler, and works around firewalls that block port other than 80 and 443
 * Removes need to configure multiple ports

== Why is this important?

 * This allowed us to reduce the number of ports in the default Wildfly installation to 3
 * This will be down to 2 by the time Wildfly goes final
 * EJB and JNDI are multiplexed over the undertow subsystem port 8080
 * Management is multiplexed over the web management port 9990
 * At some point we will offer a single port mode, to allow all server traffic to go through a single port
 * This is very important for cloud scenarios such as OpenShift, where a single physical host can handle hundreds of instances
 * The only performance overhead is the initial HTTP request, otherwise it performs identically

== HTTP Upgrade Code Example

[source,java]
----
public void handleRequest(final HttpServerExchange exchange) throws Exception {
    final String upgrade = exchange.getRequestHeaders().getFirst(Headers.UPGRADE);
    if (upgrade != null && exchange.getRequestMethod().equals(Methods.GET)) {
        if(upgrade.equals("jboss-remoting")) {
            exchange.upgradeChannel("jboss-remoting", new ExchangeCompletionListener() {
                @Override
                public void exchangeEvent(final HttpServerExchange exchange, final NextListener nextListener) {
                    try {
                        StreamConnection connection = exchange.getConnection().upgradeChannel();
                        //do stuff with our upgraded connection
                    } catch (Exception e) {
                        UndertowLogger.REQUEST_LOGGER.cannotUpgradeConnection(e);
                    }
                }
            }
            return;
        }
    }
    next.handleRequest(exchange);
}
next.handleRequest(exchange);
----

== HTTP Upgrade - Wildfly EJB example

=== Client Request

----
GET / HTTP/1.1
Host: example.com
Upgrade: jboss-remoting
Connection: Upgrade
----

=== Server Response

----
HTTP/1.1 101 Switching Protocols
Upgrade: jboss-remoting
Connection: Upgrade
----

== Websockets

=== Introduction

 * The websocket specification allows browsers and other clients to initiate a full duplex connection to the server
 * This connection is initiated via a HTTP upgrade request
 * Websockets is a framed protocol, all data is sent as part of a frame
 * Frames have a header that specifies the length and the frame type (+ some other stuff)
 * Possible to send data of unknown length using continuation frames

== Wildfly websocket support

 * Wildfly supports websockets using Undertow's websocket implementation
 * Provides support for the standard Java Web Socket API (JSR-356, a required part of EE7)
 * Because of this frameworks such as Atmosphere that use JSR-356 work out of the box

== The Java Web Socket API
 * The Websocket API provides both annotated and programatic API's to send an receive Websocket messages
 * It can act as both the server and the client
 * It provides a means of customising deployed endpoints via the `javax.websocket.server.ServerApplicationConfig` interface
 * Provides `Encoder` and `Decoder` interfaces, to encode objects as messages and visa versa

== Annotated Server Endpoint Example

[source,java]
----
@ServerEndpoint("/websocket/{name}") //note the URL template.
public class HelloEndpoint {

    @OnOpen //invoked when the client first connects
    public void onOpen(final Session session) {
        session.getAsyncRemote().sendText("hi");
    }

    @OnMessage //handles text messages
    public String message(String message, @PathParam("name") String name) {
        return "Hello " + name + " you sent" + message;
    }
}
----

== Another Annotated Server Endpoint Example

[source,java]
----
@ServerEndpoint("/websocket/{name}") //note the URL template.
public class HelloEndpoint {

    @OnMessage //handles binary messages
    public byte[] binaryMessage(byte[] binaryMessage) {
        return binaryMessage; //echo binary data
    }

    @OnClose //invoked when the connection is closed
    public void onClose(final Session session) {
        System.out.println("Connection closed");
    }
}
----

== Annotated Client Endpoint Example

[source,java]
----
@ClientEndpoint
public class AnnotatedClientEndpoint {

    @OnOpen
    public void onOpen(final Session session) {
        session.getAsyncRemote().sendText("hi");
    }

    @OnMessage
    public void onMessage(final String message, final Session session) {
        System.out.println(message);
    }
}
----

== Connecting an Annotated Client Endpoint

[source,java]
----
ServerContainer sc = servletContext.getAttribute("javax.websocket.server.ServerContainer");
Session session = sc.connectToServer(AnnotatedClientEndpoint.class, new URI("ws://example.com/chat/Stuart"));
Future<Void> future = session.getAsyncRemote().sendText("Hello Websocket");
----

== Web Socket frames

 * Websockets defines the following frame types:
  - Text - UTF-8 text frame
  - Binary - Raw binary data
  - Ping - Either side can send this to verify the the other endpoint is still connected
  - Pong - Response to a ping frame
  - Close - Sent to indicate the connection is being closed
  - Continuation - Continuation of a text or binary frame

== Message types

@OnMessage annotated endpoints can provide you with access to the message in a number of different ways:

=== Text messages
 * `java.lang.String` or Java primitive to receive the whole message
 * `java.io.Reader` to receive the whole message as a blocking stream
 * any object parameter for which the endpoint has a text decoder

=== Binary messages
 * `byte[]` or `java.nio.ByteBuffer`
 * `java.io.InputStream` to receive the whole message as a blocking stream
 * Any object parameter for which the endpoint has a binary decoder

=== Pong messages
 * javax.websocket.PongMessage

== @OnMessage methods
 * An endpoint can have at most one @OnMessage annotated method for each message type (text, binary, pong)
 * It must take one of the message type from the previous slide as a parameter
 * If it returns a value the value will be encoded as a web socket message and sent to the client
 * The `@PathParam` annotation can be used to inject values from the URL template
 * Some message types can also be used with a boolean parameter to receive part of the message at a time
 * When the boolean is `false` there is still more data to come

== Encoders and decoders
 * Allow you to convert arbitrary objects to and from web socket messages
 * Represented by 8 interfaces
  - `javax.websocket.Decoder.Binary`
  - `javax.websocket.Decoder.BinaryStream`
  - `javax.websocket.Decoder.Text`
  - `javax.websocket.Decoder.TextStream`
  - `javax.websocket.Encoder.Text`
  - `javax.websocket.Encoder.TextStream`
  - `javax.websocket.Encoder.Binary`
  - `javax.websocket.Encoder.BinaryStream`
 * Decoder classes are specified in the `@ServerEndpoint` annotation

== Servlet 3.1

 * Undertow provides a fully compliant Servlet 3.1 container

=== Notable Changes
 * Async IO Support
 * HTTP Upgrade Support

== Async IO

 * Servlet 3.1 now provides support for non-blocking IO

=== Traditional IO

 * Uses a thread per connection model
 * Reads and writes are blocking, the operation will not return until the operation is complete
 * A large number of connection directly translates to a large number of threads

=== Non-blocking IO

 * Read and write operation are non-blocking, instead a callback mechanism is used to let you know when the operation is complete
 * A single thread can handle a large number of connections
 * Programmers must be careful not to perform blocking operations within the IO thread
 * Non-blocking code is generally more complex to write than blocking code

== Servlet 3.1 Async IO

=== Performing an async write
 * Call ServletRequest.startAsync() to put the request into async mode
 * Call `ServletOutputStream.setWriteListener(WriteListener writeListener)` to put the stream into async mode
 * The write listener will be invoked after the current request has returned to the container
 * You *must* call `ServletOutputStream.isReady()` before calling `write()`
 * When `isReady()` returns true you can call `write()`
 * If the socket cannot write out all the data it will be queued, `write()` will always return immediately
 * When `isReady()` return false then you cannot write, you must return and the write listener will be invoked again
 once the stream is ready to write.

== Performing an async write (cont)

[source,java]
----
protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
    final AsyncContext context = req.startAsync();
    final ServletOutputStream outputStream = resp.getOutputStream();
    final String[] messages = {"Hello ", "async ", "world"};
    outputStream.setWriteListener(new WriteListener() {
        int pos = 0;
        @Override
        public synchronized void onWritePossible() throws IOException {
            while (outputStream.isReady() && pos < messages.length()) {
                outputStream.write(messages[pos++].getBytes());
            }
            if (pos == messages.length()) context.complete();
        }
    });
}
----

== The Servlet Upgrade API

 * To upgrade the request we call `<T extends HttpUpgradeHandler> T HttpServletRequest.upgrade(Class<T> handlerClass)`
 * We are still responsible for checking for the `Upgrade` header, and setting and appropriate response headers
 * Once the request is finished the resulting `HttpUpgradeHandler` will take over the connection, and can send and receive
  data via the provided `WebConnection` and its associated streams.
 * Upgraded connection can use the async IO capabilites of `ServletInputStream` and `ServletOutputStream`

== The Servlet Upgrade API (cont)
[source,java]
----
public class MyProtocolUpgradeFilter implements Filter {

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        if("my-protocol".equals(req.getHeader("Upgrade"))) {
            HttpServletResponse resp = (HttpServletResponse) response;
            resp.setHeader("Upgrade", "my-protocol");
            req.upgrade(MyProtocolHandler.class);
            return;
        }
        chain.doFilter(request, response);
    }
    ...
----

== The Servlet Upgrade API Continued
[source,java]
----
public interface HttpUpgradeHandler {

    public void init(WebConnection wc);

    public void destroy();
}

public interface WebConnection extends AutoCloseable {

    public ServletInputStream getInputStream() throws IOException;

    public ServletOutputStream getOutputStream() throws IOException;
}
----

== Reverse Proxy

 * Undertow has the ability to act as a high performance reverse proxy
 * Handles both AJP and HTTP backends
 * Supports round robin load balancing
 * Support for mod_cluster is planned
 * Still under heavy development

== Setting up the reverse proxy

[source,java]
----
Undertow server = Undertow.builder()
        .addListener(8080, "localhost")
        .setHandler(new ProxyHandler(new LoadBalancingProxyClient()
            .setConnectionsPerThread(20)
            .addHost(new URI("http", null, "1.0.0.1", 8080, null, null, null))
            .addHost(new URI("http", null, "1.0.0.2", 8080, null, null, null))
            , 10000))
        .build();
server.start();
----

== Embedded Undertow Servlet

 * Undertow has been designed to be easy to embed
 * Has a fluent API that makes it easy to build and deploy servlet applications
 * This API is exactly the same API that Wildfly uses to integrate Undertow

== Embedded API example

[source,java]
----
final PathHandler pathHandler = new PathHandler();
final ServletContainer container = ServletContainer.Factory.newInstance();
DeploymentInfo d = Servlets.deployment()
    .addServlet(Servlets.servlet("My Servlet", MessageServlet.class)
            .addMapping("/message")
            .addInitParam("message", "Hello World"))
    .addListener(Servlets.listener(MyListener.class))
    .setDefaultSessionTimeout(10);
DeploymentManager manager = Servlets.defaultContainer().addDeployment(d);
manager.deploy();
HttpHandler handler = manager.start();
pathHandler.addPath("/myDeployment", handler);
----


== Servlet Extensions
 * Undertow provides the ability to customise a deployment via the `io.undertow.servlet.ServletExtension` interface
 * Similar to a `ServletContainerInitializer` but more flexible, as any part of the deployment can be changed
 * Allows you to use native Undertow handlers in a servlet deployment, without incurring any servlet overhead
 * Gives you access to the DeploymentInfo structure, so you have access to the same API that was used to build the deployment

[source,java]
----
public interface ServletExtension {
    void handleDeployment(final DeploymentInfo d, final ServletContextImpl s);
}
----


== Get Involved!
 *  www.wildfly.org
 * Downloads: http://www.wildfly.org/download/
 * Forums and wiki: https://community.jboss.org/en/ wildfly
 * Docs: https://docs.jboss.org/author/display/WFLY8/ Documentation
 * Dev mailing list: wildfly-dev@lists.jboss.org
 * IRC on freenode: #wildfly and #wildfly-dev
 * Code: https://github.com/wildfly/wildfly

== Q & A
